@model Domain.Menu
@using ahmadi.Infrastructure.Helper
<title>ویرایش منو</title>
@{
    var HelpModuleSection = ViewBag.HelpModuleSection as Domain.HelpModuleSection;
}

<div class="x_panel">
    <div class="x_content">
        <div class="text-left"><a class="btn btn-success" href="@Url.Action("Index")"> بازگشت به لیست <span class="glyphicon glyphicon-chevron-left"></span></a></div>

        <h1 style="display:inline-block;font-size: 2em;" class="box-title">
            <i class="flaticon-menu"></i> ویرایشِ منو
        </h1>
            <br /><br />
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <p class="text text-danger">@ViewBag.Error</p>
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.DisplaySort)

        <div class="form-group">
            <div class="control-label col-md-3">
                <span class="glyphicon glyphicon-question-sign" data-html="true" data-toggle="tooltip" data-placement="left" title="@(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== " عنوان").Any()? Html.Raw(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== "عنوان").First().Data).ToHtmlString():Html.Raw("").ToHtmlString())"></span>
                @Html.LabelFor(model => model.Title)
            </div>
            <div class="col-md-9">
                <p><span class="ContentTitle"></span> کاراکتر باقی مانده.</p>
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { id = "ContentTitle", @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MenuID, "منوی اصلی", htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownList("MenuID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.MenuID, "", new { @class = "text-danger" })
            </div>
        </div>

        <fieldset class="NewFieldset">
            <legend class="Newlegend">
                <span class="glyphicon glyphicon-question-sign" data-html="true" data-toggle="tooltip" data-placement="left" title="@(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== " لینک به محتواهای داخل سایت").Any()? Html.Raw(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== "لینک به محتواهای داخل سایت").First().Data).ToHtmlString():Html.Raw("").ToHtmlString())"></span>
                &nbsp;&nbsp; لینک به محتواهای داخل سایت
            </legend>
            <div>
                <div class="form-group">
                    <label class="col-md-3">
                        <label class="col-lg-7 col-md-7 col-sm-7 col-xs-12"><input checked name="select-menu-type" id="Internal-menu-type" type="radio" /> انتخاب </label>
                        <label class="col-lg-5 col-md-5 col-sm-5 col-xs-12">@Html.LabelFor(model => model.TypeId, htmlAttributes: new { @class = "control-label" })</label>
                        <label class="clearfix"></label>
                    </label>
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.TypeId, ViewBag.TypeIdSelectListItem as List<SelectListItem>
                    , "--انتخاب نشده--", htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group" id="SearchContainer" style="display:none">
                    <label class="control-label col-md-3">
                        جستجو در محتواها

                    </label>
                    <div class="col-md-9">
                        <input type="text" class="form-control" id="SearchContent" placeholder="عنوان را وارد نمایید..." style="display:inline-block;width:40%" />

                    </div>
                </div>

                <div class="form-group">
                    <span id="CurrentLinkId" class="hide">
                        @if (Model.LinkId.HasValue)
                        {
                            <text>@Model.LinkId</text>
                        }
                        else
                        {
                            <text>@Model.LinkUniqIdentifier</text>
                        }
                    </span>
                    @Html.LabelFor(model => model.LinkId, htmlAttributes: new { @class = "control-label col-md-3" })
                    <div class="col-md-9">
                        @Html.DropDownList("LinkIdSelectListItem", null, null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LinkId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </fieldset><br /><br />
        <fieldset class="NewFieldset">
            <legend class="Newlegend">
                <span class="glyphicon glyphicon-question-sign" data-html="true" data-toggle="tooltip" data-placement="left" title="@(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== " لینک به خارج از سایت").Any()? Html.Raw(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== "لینک به خارج از سایت").First().Data).ToHtmlString():Html.Raw("").ToHtmlString())"></span> &nbsp;&nbsp; لینک به خارج از سایت
            </legend>
            <div class="form-group">
            </div>
            <div>
                <div class="form-group">
                    <div class="col-md-3">
                        <label class="col-lg-6 col-md-6 col-sm-6 col-xs-12"><input name="select-menu-type" id="External-menu-type" type="radio" /> انتخاب </label>
                        <label class="col-lg-6 col-md-6 col-sm-6 col-xs-12">@Html.LabelFor(model => model.OffLink, htmlAttributes: new { @class = "control-label" })</label>
                        <label class="clearfix"></label>
                    </div>
                    <div class="col-md-9">
                        <p><span class="ContentLink"></span> کاراکتر باقی مانده.</p>
                        @Html.EditorFor(model => model.OffLink, new { htmlAttributes = new { id = "ContentLink", @class = "form-control", @disabled = "disabled", style = "direction:ltr;text-align:left" } })
                        @Html.ValidationMessageFor(model => model.OffLink, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </fieldset><br />


        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-3">
                @Html.LabelFor(model => model.Cover)
                <span class="glyphicon glyphicon-question-sign" data-html="true" data-toggle="tooltip" data-placement="left" title="@(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== " تصویر پشت زمینه").Any()? Html.Raw(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== "تصویر پشت زمینه").First().Data).ToHtmlString():Html.Raw("").ToHtmlString())"></span>
            </div>

            <div class="col-md-9">
                @Ajax.ActionLink("انتخاب یا آپلود", "OpenAttachement", "FileManager", null, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "createView", OnBegin = "$('.loading').show();", OnSuccess = "$('.loading').hide();createMode('',2)", InsertionMode = InsertionMode.Replace }, htmlAttributes: new { @class = "btn btn-info OpenFileManager" })
                <div id="createView"></div>

                <div id="AttachementContainer">

                    @if (Model.Cover.HasValue)
                    {
                        @Html.Displayattachment(Model.attachment.FileName, Model.Title, "SM", htmlAttributes: new { @class = "img-responsive", width = "220", height = "120", style = "display:inline-block;width:220px;height:120px" })
                    }
                    else
                    {

                        <img src="~/Content/Default/images/default-thumbnail.jpg" style="width:220px;height:120px" />
                    }


                    @Html.EditorFor(model => model.Cover, new { htmlAttributes = new { @class = "form-control text-left Ltr", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.Cover, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="control-label col-md-3">
                @Html.LabelFor(model => model.HomeCover)
                <span class="glyphicon glyphicon-question-sign" data-html="true" data-toggle="tooltip" data-placement="left" title="@(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== " تصویر پشت زمینه").Any()? Html.Raw(HelpModuleSection.HelpModuleSectionFields.Where(x=>x.Name== "تصویر پشت زمینه").First().Data).ToHtmlString():Html.Raw("").ToHtmlString())"></span>
            </div>

            <div class="col-md-9">
                @Ajax.ActionLink("انتخاب یا آپلود", "OpenAttachement", "FileManager", null, new AjaxOptions { HttpMethod = "GET", UpdateTargetId = "createView", OnBegin = "$('.loading').show();", OnSuccess = "$('.loading').hide();createMode('AttachementContainer2',2)", InsertionMode = InsertionMode.Replace }, htmlAttributes: new { @class = "btn btn-info OpenFileManager" })

                <div id="AttachementContainer2" class="AttachementContainer AttachementContainer2">

                    @if (Model.HomeCover.HasValue)
                    {
                        @Html.Displayattachment(Model.Homeattachment.FileName, Model.Title, "SM", htmlAttributes: new { @class = "img-responsive", width = "220", height = "120", style = "display:inline-block;width:220px;height:120px" })
                    }
                    else
                    {

                        <img src="~/Content/Default/images/default-thumbnail.jpg" style="width:220px;height:120px" />
                    }

                    @Html.EditorFor(model => model.HomeCover, new { htmlAttributes = new { @class = "form-control text-left Ltr", @readonly = "readonly" } })
                    @Html.ValidationMessageFor(model => model.HomeCover, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @Html.HiddenFor(x => x.DisplaySort)
        @Html.HiddenFor(x => x.LanguageId)
        <div class="form-group">
            @Html.LabelFor(model => model.PlaceShow, htmlAttributes: new { @class = "control-label col-md-3" })
            <div class="col-md-9">
                @Html.DropDownList("PlaceShow", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.PlaceShow, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-9">
                <input type="submit" value="ذخیره" class="btn btn-primary" />
            </div>
        </div>
    </div>
            }

</div>
</div>
@section Scripts{
    <script src="~/Areas/Admin/Content/Scripts/View/EditMenu.js"></script>
    <script>
        $('#ContentTitle').simplyCountable({ counter: '.ContentTitle', maxCount: 100, safeClass: 'safe', overClass: 'over' });
        $('#ContentLink').simplyCountable({ counter: '.ContentLink', maxCount: 255, safeClass: 'safe', overClass: 'over' });

        $(document).ready(function () {
            $("#Internal-menu-type").change(function () {
                $("#ContentLink").prop("disabled", true);
                $("#ContentLink").val("");
                $("#TypeId").prop("disabled", false);
                $("#SearchContent").prop("disabled", false);
                $("#LinkIdSelectListItem").prop("disabled", false);

            });
            $("#External-menu-type").change(function () {
                $("#ContentLink").prop("disabled", false);
                $("#TypeId").prop("disabled", true);
                $("#TypeId option:eq(0)").prop('selected', true);
                $("#SearchContent").prop("disabled", true);
                $("#SearchContent").val("");
                $("#LinkIdSelectListItem").prop("disabled", true);
                $("#LinkIdSelectListItem option:eq(0)").prop('selected', true);
                $("#SearchContainer").hide();
            });
        });
    </script>
    @Scripts.Render("~/bundles/Admin/FileManager/Js")
}